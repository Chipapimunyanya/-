package main

import (
	"fmt"
	"math/rand"
	"sync"
)

var (
	numOfGo    int64 = 50
	numOfNotes int64 = 500
)

type Cache struct {
	ch []int64
	mx *sync.Mutex
}

func main() {
	var wg sync.WaitGroup = sync.WaitGroup{}
	var mu sync.Mutex = sync.Mutex{}

	ch := Cache{
		ch: []int64{},
	}

	for i := int64(0); i < numOfGo; i++ {
		wg.Add(1)
		go writer(&ch, &wg, &mu)
	}

	wg.Wait()
	fmt.Println("Должно быть записано:", numOfNotes*numOfGo, "значений")
	fmt.Println("В итоге записано", len(ch.ch), "значений")
}

func (c *Cache) Add(data int) {
	c.ch = append(c.ch, int64(data))
}

func writer(ch *Cache, wg *sync.WaitGroup, mu *sync.Mutex) {
	defer wg.Done()
	for i := int64(0); i < numOfNotes; i++ {
		n := rand.Intn(500000)
		mu.Lock()
		ch.Add(n)
		mu.Unlock()
	}
}
